const deviceModel = require('../models/deviceModel')
var fs = require('fs');
var PdfPrinter = require('pdfmake');
var Roboto = require('../fonts/Roboto');
var printer = new PdfPrinter(Roboto);

async function getDeviceLogData (request, reply) {
    const logData = await deviceModel.getDeviceLogs(request.query.deviceID, request.query.username);
    if ((logData) && (logData.length > 0))
		  return reply.send(logData);
	  else
		  return reply.status(500).send([{ error: "User Not Found or Device not registered"}]);
}

async function getDeviceLogMultiData (request, reply) {
    const logData = await deviceModel.getDeviceMultiLogs(request.query.deviceID, request.query.username);
    if ((logData) && (logData.length > 0))
		  return reply.send(logData);
	  else
		  return reply.status(500).send({ error: "User Not Found or Device not registered"});
}

async function getMultiDevicesLog (request, reply) {
    const logData = await deviceModel.getMultiDevicesLogs(request.query.deviceID, request.query.username);
    if ((logData) && (logData.length > 0))
		  return reply.send(logData);
	  else
		  return reply.status(500).send({ error: "User Not Found or Device not registered"});
}

async function getDevicesList (request, reply) {
  const devicesList = await deviceModel.getFirealarmList(request.query.username);
  if ((devicesList) && (devicesList.length > 0))
    return reply.send(devicesList);
  else
    return reply.status(500).send([{ error: "User Not Found or No registered Fire alarms found registered for user."}]);
}

/*async function getDeviceStatus (request, reply) {
  const deviceStatus= await deviceModel.getFirealarmStatus(request.query.deviceID, request.query.username);
  if ((deviceStatus) && (deviceStatus.length > 0))
    return reply.send(deviceStatus[0]);
  else
    return reply.status(500).send({ error: "User Not Found or No registered Fire alarms found registered for user."});
}*/

async function getZoneName (request, reply) {
  const zoneName = await deviceModel.getFirealarmZoneName(request.query.deviceID, request.query.username);
  if ((zoneName) && (zoneName.length > 0))
    return reply.send(zoneName[0]);
  else
    return reply.status(500).send({ error: "User Not Found or No registered names for the zone found."});
}

async function setZoneName (request, reply) {
  const status = await deviceModel.setFirealarmZoneName(request.body);
  if (status.returnVal) {
    return reply.send({returnVal: true});
  }
  else
    return reply.status(500).send({ error: "User Not Found or No registered firealarm found."});
}

async function setSiteName (request, reply) {
  const status = await deviceModel.setFirealarmSiteName(request.body);
  if (status.returnVal) {
    return reply.send({returnVal: true});
  }
  else
    return reply.status(500).send({ error: "User Not Found or No site found."});
}

async function getZoneReport (request, reply) {
	const status = await deviceModel.generateZoneReport(request.body);
	if (status.returnVal) {
			if (status.reportType == 0) {
			  var reportHeader = [{text: 'S No', style: 'tableHeader'}, {text: 'Zone 1', style: 'tableHeader'}, 
								  {text: 'Zone 2', style: 'tableHeader'}, {text: 'Zone 3', style: 'tableHeader'}, 
								  {text: 'Zone 4', style: 'tableHeader'}, {text: 'Zone 5', style: 'tableHeader'}, 
								  {text: 'Zone 6', style: 'tableHeader'}, {text: 'Zone 7', style: 'tableHeader'}, 
								  {text: 'Zone 8', style: 'tableHeader'}, {text: 'Date Time', style: 'tableHeader'}];
			  
			  const zoneName = await deviceModel.getFirealarmZoneName(request.body.deviceID, request.body.username);
			  if ((zoneName) && (zoneName.length > 0)) {
				  reportHeader = [{text: 'S No', style: 'tableHeader'}, {text: zoneName[0]['zone1'], style: 'tableHeader'}, 
								  {text: zoneName[0]['zone2'], style: 'tableHeader'}, {text: zoneName[0]['zone3'], style: 'tableHeader'}, 
								  {text: zoneName[0]['zone4'], style: 'tableHeader'}, {text: zoneName[0]['zone5'], style: 'tableHeader'}, {text: zoneName[0]['zone6'], style: 'tableHeader'}, 
								  {text: zoneName[0]['zone7'], style: 'tableHeader'}, {text: zoneName[0]['zone8'], style: 'tableHeader'}, {text: 'Date Time', style: 'tableHeader'}];
			  }
			  var dateString = "Date: " + new Date(Date.now() + 19800000).toISOString().slice(0, 19).replace('T', ' ') + "		" + "Report Generated By: ";
			  var dd = {
				  content:[
					  {text: dateString, fontSize: 14, bold: false}, 
					  {text: 'Alarm Report', alignment:'center', style:'header'},
					  {
						  bold: true,
						  fontSize: 10,
						  ul: [
							  'Device ID : ' + request.body.deviceID,
							  'Site Name : ' + status.result[0]['firealarmName'],
						  ]
					  },
					  {
						  style: 'tableExample',
						  table: {
							  headerRows: 1,
							  widths: [25,'auto','auto','auto','auto','auto','auto','auto','auto','auto'],
							  body:buildTableBody(status.result, reportHeader,['sno', 'zone1Data','zone2Data','zone3Data','zone4Data','zone5Data','zone6Data','zone7Data','zone8Data','createdAt']),
						  },
						  layout: {
							  fillColor: function (rowIndex, node, columnIndex) {
								  return (rowIndex % 2 === 0) ? '#CCCCCC' : null;
							  }
						  }
					  },
				  ],
				  styles: {
					  header: {
						  fontSize: 18,
						  bold: true,
						  alignment: 'justify'
					  },
					  subheader: {
						  fontSize: 14,
						  bold: true,
						  margin: [0, 10, 0, 5]
					  },
					  tableExample: {
						  margin: [0, 5, 0, 15]
					  },
					  tableHeader: {
						  bold: true,
						  fontSize: 9,
						  color: 'black'
					  }
				  },
			  };
			  var pdfDoc = printer.createPdfKitDocument(dd);
			  var chunks = [];
			  pdfDoc.on('data', function (chunk) {
				  chunks.push(chunk);
			  });
			  pdfDoc.on('end', function () {
				  result = Buffer.concat(chunks);
				  reply.type('application/pdf').send(result);
			  });
			  pdfDoc.end();
		  }
		  else if (status.reportType == 1) {
			  var reportHeader = [{text: 'S No', style: 'tableHeader'},
								  {text: 'Zone 1', style: 'tableHeader'}, 
								  {text: 'Zone 2', style: 'tableHeader'}, {text: 'Zone 3', style: 'tableHeader'}, 
								  {text: 'Zone 4', style: 'tableHeader'}, {text: 'Zone 5', style: 'tableHeader'}, 
								  {text: 'Zone 6', style: 'tableHeader'}, {text: 'Zone 7', style: 'tableHeader'}, 
								  {text: 'Zone 8', style: 'tableHeader'}, {text: 'Date Time', style: 'tableHeader'}];
			  
			  var tabResult = [];
			  for (let i = 0; i < status.result.length; i++) {
				  var tempFirealarmID = status.result[i][0]['firealarmID'];
				  var tempFirealarmName = status.result[i][0]['firealarmName'];
				  const zoneName = await deviceModel.getFirealarmZoneName(tempFirealarmID, request.body.username);
				  if ((zoneName) && (zoneName.length > 0)) {
					  reportHeader = [{text: 'S No', style: 'tableHeader'},  
									  {text: zoneName[0]['zone1'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone2'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone3'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone4'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone5'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone6'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone7'], style: 'tableHeader'}, 
									  {text: zoneName[0]['zone8'], style: 'tableHeader'}, {text: 'Date Time', style: 'tableHeader'}];
				  }
				  //tabResult.push({text: 'Hello',  style:'subheader'})
				  tabResult.push({
					  bold: true,
					  fontSize: 10,
					  ul: [
						  'Device ID : ' + tempFirealarmID,
						  'Site Name : ' + tempFirealarmName,
					  ]
				  });
				  tabResult.push({
					  margin: [0, 5, 0, 15],//[-5,10,-5,-3],
					  table: {
						  headerRows: 1,
						  //widths: [20,40,40,35,35,35,35,35,35,35,35,60],
						  widths: [25,'auto','auto','auto','auto','auto','auto','auto','auto','auto'],
						  body:buildTableBody(status.result[i], reportHeader,['sno', 'zone1Data','zone2Data','zone3Data','zone4Data','zone5Data','zone6Data','zone7Data','zone8Data','createdAt']),
					  },
				  });
			  }
			  var dateString = "Date: " + new Date(Date.now() + 19800000).toISOString().slice(0, 19).replace('T', ' ') + "		" + "Report Generated By: ";
			  var dd = {
				  content:[
					  {text: dateString, fontSize: 14, bold: false}, 
					  {text: 'Alarm Report', alignment:'center', style:'header'},
					  tabResult,
				  ],
				  styles: {
					  header: {
						  fontSize: 18,
						  bold: true,
						  alignment: 'justify'
					  },
					  subheader: {
						  fontSize: 14,
						  bold: true,
						  margin: [0, 10, 0, 5]
					  },
					  tableHeader: {
						  bold: true,
						  fontSize: 9,
						  color: 'black'
					  }
				  },
			  };
			  var pdfDoc = printer.createPdfKitDocument(dd);
			  var chunks = [];
			  pdfDoc.on('data', function (chunk) {
				  chunks.push(chunk);
			  });
			  pdfDoc.on('end', function () {
				  result = Buffer.concat(chunks);
				  reply.type('application/pdf').send(result);
			  });
			  pdfDoc.end();
		  }
		
	}
	else
	  return reply.status(500).send({ error: status.errorMsg});
  }
  
  async function getDeviceStatusReport (request, reply) {
	const status = await deviceModel.generateDeviceStatusReport(request.body);
	if (status.returnVal) {
		var dateString = "Date: " + new Date(Date.now() + 19800000).toISOString().slice(0, 19).replace('T', ' ') + "		" + "Report Generated By: ";
		var dd = {
			content:[
			  {text: dateString, fontSize: 14, bold: false}, 
			  {text: 'Site Offline Status Report', alignment:'center', style:'header'},
			  {
				  style: 'tableExample',
				  table: {
					  headerRows: 1,
					  widths: [25,'auto','auto','auto','auto'],
					  body:buildTableBodyN(status.result, [{text: 'S No', style: 'tableHeader'}, {text: 'Device ID', style: 'tableHeader'}, {text: 'Site Name', style: 'tableHeader'}, {text: 'Offline Start Time', style: 'tableHeader'}, {text: 'Offline End Time', style: 'tableHeader'}],['sno', 'firealarmID','firealarmName','startTime','endTime']),
				  },
				  layout: {
					  fillColor: function (rowIndex, node, columnIndex) {
									  return (rowIndex % 2 === 0) ? '#CCCCCC' : null;
								 }
				  }
			  },
			],
			styles: {
			  header: {
				  fontSize: 18,
				  bold: true,
				  alignment: 'justify'
			  },
			  subheader: {
				  fontSize: 14,
				  bold: true,
				  margin: [0, 10, 0, 5]
			  },
			  tableExample: {
				  margin: [20, 5, 0, 15]
			  },
			  tableHeader: {
				  bold: true,
				  fontSize: 11,
				  color: 'black'
			  }
			},
		};
		var pdfDoc = printer.createPdfKitDocument(dd);
		var chunks = [];
		pdfDoc.on('data', function (chunk) {
			  chunks.push(chunk);
		});
		pdfDoc.on('end', function () {
		  result = Buffer.concat(chunks);
		  reply.type('application/pdf').send(result);
		});
		pdfDoc.end();
	}
	else
	  return reply.status(500).send({ error: status.errorMsg});
  } 
  
  function buildTableBody(data, sd, columns) {
	  var body = [];
  
	  body.push(sd);
  
	  data.forEach(function(row) {
		  var dataRow = [];
  
		  columns.forEach(function(column) {
			  if ((column == 'zone1Data') || (column == 'zone2Data') || (column == 'zone3Data') || (column == 'zone4Data') || (column == 'zone5Data') || (column == 'zone6Data') || (column == 'zone7Data') || (column == 'zone8Data')) {
				  if (row[column] == 1)
					  dataRow.push({text:"Alarm",fillColor: '#ff6e6e', fontSize:9, bold:true});
				  else
					  dataRow.push({text:"Healthy",fillColor: '#9cff5e', fontSize:9, bold:true});
			  }
			  else {
				  dataRow.push({text:row[column].toString(),fontSize:9});
			  }
		  });
		  body.push(dataRow);
	  });
  
	  return body;
  }
  
  function buildTableBodyN(data, sd, columns) {
	  var body = [];
  
	  body.push(sd);
  
	  data.forEach(function(row) {
		  var dataRow = [];
		  columns.forEach(function(column) {
			  dataRow.push(row[column].toString());
		  })
		  body.push(dataRow);
	  });
  
	  return body;
  }



module.exports = {
    getDeviceLogData,
    getDeviceLogMultiData,
    getDevicesList,
    //getDeviceStatus,
    getZoneName,
    setZoneName,
    getMultiDevicesLog,
    setSiteName,
    getZoneReport,
    getDeviceStatusReport
};
